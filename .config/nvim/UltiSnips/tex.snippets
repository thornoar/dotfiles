global !p
import os

def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'

def root():
	line = vim.eval("getline(1)")
	cbind = line.find("{")
	docclass = line[(cbind+1):line.find("}", cbind+1)]
	if (docclass == "subfiles") :
		sbind = line.find("[")
		rootfile = line[(sbind+1):line.find("]", sbind+1)]
		return rootfile[:(rootfile.rfind("/")+1)]
	else :
		return "./"
endglobal

snippet cfg "code figure" b
\\begin{${1:figure}}[]
	\\centering
	\\includegraphics[$2]{$3.${4:pdf}}
	\\caption{$5}
	\\label{fig:$3}
\\end{$1}
%$7: |sub|[$3.${6:asy}]
`!p
if (len(t[7]) == 1):
	root = root()
	filename = root+"figures/"+t[3]+"."+t[6]
	if (not os.path.exists(root+"figures")):
		os.system("mkdir " + root + "figures")
		os.system("touch " + filename)
	else :
		if (not os.path.exists(root + "figures/" + t[3] + "." + t[6])):
			os.system("touch " + filename)
	if (t[7] == "h"):
		vim.command("split " + filename + " | set filetype="+t[6] + " | wincmd p")
	if (t[7] == "v"):
		vim.command("vsplit " + filename + " | set filetype="+t[6] + " | wincmd p")
	if (t[7] == 't'):
		vim.command("tabnew " + filename + " | set filetype="+t[6] + " | tabp")
	t[7]+="d"
`
$0
endsnippet

snippet fg "Figure environment" b
\\begin{${1:figure}}[]
	\\centering
	${2:\includegraphics[$3]{$4}}
	\\caption{${5:$4}}
	\\label{fig:${6:${4/\W+/-/g}}}
\\end{$1}
endsnippet

snippet sf "subfile" b
\\subfile{$1/$1.tex}
%$2: |sub|[$1.tex]
`!p
if (len(t[2]) == 1):
	root = root()
	filename = root+t[1]+"/"+t[1]+".tex"
	if (not os.path.exists(root+t[1])):
		os.system("mkdir " + root + t[1])
		os.system("touch " + filename)
	else :
		if (not os.path.exists(root + t[1] +"/"+ t[1] + ".tex")):
			os.system("touch " + filename)
	if (t[2] == "h"):
		vim.command("split " + filename + " | set filetype=tex | wincmd p")
	if (t[2] == "v"):
		vim.command("vsplit " + filename + " | set filetype=tex | wincmd p")
	if (t[2] == 't'):
		vim.command("tabnew " + filename + " | set filetype=tex | tabp")
	t[2]+="d"
`
$0
endsnippet

snippet geom "\geometry" b
\\geometry{top = $1, bottom = ${2:$1}, left = $3, right = ${4:$3}}
$0
endsnippet

snippet q "quote" i
\`$0 '
endsnippet

snippet qq "quote" i
\`\`$0''
endsnippet

snippet prj "Basic template" b
\\documentclass[12pt, a4paper]{article}
\\input{preamble}

\\makeatletter
\\let\\ps@plain\\ps@empty
\\makeatletter

\\begin{document}

$0

\\end{document}
endsnippet

snippet doc "documentclass"
\\documentclass[$1]{$2}
$0
endsnippet

snippet beg "begin{}/end{}" i
\\begin{$1}
$0
\\end{$1}
endsnippet

snippet sec "\section{}" b
\\section{$1}
$0
endsnippet

snippet ssec "\subsection" b
\\subsection{$1}

$0
endsnippet

snippet th "Theorem" b
\\begin{theorem}
    $0
\\end{theorem}
endsnippet

snippet lm "Lemma" b
\\begin{lemma}
    $0
\\end{lemma}
endsnippet

snippet cr "Corollary" b
\\begin{corollary}
    $0
\\end{corollary}
endsnippet

snippet df "Definition" b
\\begin{definition}
    $0
\\end{definition}
endsnippet

snippet pf "Proof" b
\\begin{proof}
    $0
\\end{proof}
endsnippet

snippet asydef "begin{asy}///< / ///>end{asy}" b
\\begin{asydef}
///<
$0
///>
\\end{asydef}
endsnippet

snippet bf "textbf" i
\\textbf{$0}
endsnippet

snippet it "textit" i
\\textit{$0}
endsnippet

priority 100
snippet ... "ldots" i
\\ldots
endsnippet

snippet ctr "center" b
\\begin{center}
$0
\\end{center}
endsnippet

snippet table "Table environment" b
\\begin{table}[${1:htpb}]
	\\centering
	\\caption{${2:caption}}
	\\label{tab:${3:label}}
	\\begin{tabular}{${5:c}}
	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
	\\end{tabular}
\\end{table}
endsnippet

snippet enum "Enumerate" b
\\begin{enumerate}
	\\item $0
\\end{enumerate}
endsnippet

snippet item "Itemize" b
\\begin{itemize}
	\\item $0
\\end{itemize}
endsnippet

snippet desc "Description" b
\\begin{description}
	\\item[$1] $0
\\end{description}
endsnippet

snippet im "\item" b
\\item[$1] $0
endsnippet

snippet pac "Package" bA
\\usepackage[${1:options}]{${2:package}}
$0
endsnippet

snippet newcom "newcommand" bA
\\newcommand{${1:command}}[${2:arguments}]{${3:definition}}
$0
endsnippet

snippet => "implies" Ai
\\implies
endsnippet

snippet =< "implied by" Ai
\\impliedby
endsnippet

context "math()"
snippet iff "iff" Ai
\\iff
endsnippet

snippet mk "Math" wA
$ ${1} $`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet dm "Display Math" wA
\\[ ${0:${VISUAL}} \\]
endsnippet

snippet ddm "Super display math" bA
\\[

${1:${VISUAL}}

\\] $0
endsnippet

snippet ali "Align" bA
\\vspace{-1em}
\\begin{align*}
	${1:${VISUAL}}
\\end{align*}
endsnippet


context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet


snippet spy "sympyblock " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet

priority 10000
snippet mca "mathematicablock" w
math $1 math$0
endsnippet

priority 10000
snippet 'math(.*)math' "math" wr
`!p
import subprocess
code = match.group(1)
code = 'ToString[' + code + ', TeXForm]'
snip.rv = subprocess.check_output(['wolframscript', '-code', code])
`
endsnippet

snippet == "equals" iA
&= $1 \\\\
endsnippet

snippet != "equals" iA
\\neq 
endsnippet

context "math()"
snippet ceil "ceil" iA
\\left\\lceil $1 \\right\\rceil $0
endsnippet

context "math()"
snippet floor "floor" iA
\\left\\lfloor $1 \\right\\rfloor$0
endsnippet

snippet pmat "pmat" iA
\\begin{pmatrix} $1 \\end{pmatrix} $0
endsnippet

snippet bmat "bmat" iA
\\begin{bmatrix} $1 \\end{bmatrix} $0
endsnippet

context "math()"
snippet tp "Triangular parenthesis" wA
\\langle $1 \\rangle $0
endsnippet

context "math()"
snippet () "left( right)" iA
\\left( ${1:${VISUAL}} \\right) $0
endsnippet

snippet lr "left( right)" i
\\left( ${1:${VISUAL}} \\right) $0
endsnippet

snippet lr( "left( right)" i
\\left( ${1:${VISUAL}} \\right) $0
endsnippet

snippet lr| "left| right|" i
\\left| ${1:${VISUAL}} \\right| $0
endsnippet

snippet lr{ "left\{ right\}" i
\\left\\{ ${1:${VISUAL}} \\right\\} $0
endsnippet

snippet lrb "left\{ right\}" i
\\left\\{ ${1:${VISUAL}} \\right\\} $0
endsnippet

snippet lr[ "left[ right]" i
\\left[ ${1:${VISUAL}} \\right] $0
endsnippet

snippet lra "leftangle rightangle" iA
\\left< ${1:${VISUAL}} \\right>$0
endsnippet

context "math()"
snippet conj "conjugate" iA
\\overline{$1}$0
endsnippet

snippet sum "sum" w
\\sum_{k=${1:1}}^{${2:\infty}} ${3:a_n z^n}
endsnippet

snippet taylor "taylor" w
\\sum_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
endsnippet

snippet lim "limit" w
\\lim_{${1:n} \to ${2:\infty}} 
endsnippet

snippet limsup "limsup" w
\\limsup_{${1:n} \to ${2:\infty}} 
endsnippet

snippet prod "product" w
\\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

snippet part "d/dx" w
\\frac{\\partial ${1:V}}{\\partial ${2:x}} $0
endsnippet

context "math()"
snippet sq "\sqrt{}" iA
\\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet ^^ "to the ... power" iA
^{$1}$0
endsnippet

context "math()"
snippet rd "to the ... power" iA
^{($1)}$0
endsnippet

snippet __ "subscript" iA
_{$1}$0
endsnippet

snippet ooo "\infty" iA
\\infty
endsnippet

snippet rij "mrij" i
(${1:x}_${2:n})_{${3:$2}\\in${4:\\N}}$0
endsnippet

snippet <+ "leq" iA
\\leqslant 
endsnippet

snippet >+ "geq" iA
\\geqslant 
endsnippet

context "math()"
snippet EE "exists" iA
\\exists 
endsnippet

context "math()"
snippet AA "forall" iA
\\forall 
endsnippet

context "math()"
snippet ee "\in" iA
\\in 
endsnippet

snippet hs "\hspace" i
\\hspace{1cm} 
endsnippet

context "math()"
snippet xnn "xn" iA
x_{n}
endsnippet

context "math()"
snippet ynn "yn" iA
y_{n}
endsnippet


context "math()"
snippet xii "xi" iA
x_{i}
endsnippet

context "math()"
snippet yii "yi" iA
y_{i}
endsnippet

context "math()"
snippet xjj "xj" iA
x_{j}
endsnippet

context "math()"
snippet yjj "yj" iA
y_{j}
endsnippet

context "math()"
snippet xp1 "x" iA
x_{n+1}
endsnippet

context "math()"
snippet xmm "x" iA
x_{m}
endsnippet

snippet r0+ "R0+" iA
\\R_0^+
endsnippet

snippet plot "Plot" b
\\begin{asy}[width = ${1:\\textwidth}]
///<
fullgraph(pic = ${1:currentpicture}, f = new real(real x){return $2;}, x1 = ${3:-1}, x2 = ${4:1}, xmargin = 0.5, ymargin = 0.5, drawaxis = ${5:true}, displaynumbers = ${6:true}, displayleftnumber = ${7:true}, displayrightnumber = ${8:true}, axis = ${9:currentpen}, plot = ${10:currentpen+blue+cyan}, smooth = ${11:true}, drawdashes = ${12:true}, drawleftdash = ${13:$12}, drawrightdash = ${14:$12}, draweq = ${15:true}, align = ${16:E}, leftnumberalign  =  ${17:S}, rightnumberalign = ${18:S}, graphlabel  =  ${19:"$y  =  e^x$"}, n = ${20:1000}, axisarrow  =  ${21:Arrow(SimpleHead)}, drawzero = ${22:true});
///>
\\end{asy}
endsnippet

context "math()"
snippet mcal "mathcal" iA
\\mathcal{$1}$0
endsnippet

snippet ll "l" wA
\\ell
endsnippet

context "math()"
snippet nabl "nabla" iA
\\nabla 
endsnippet

context "math()"
snippet xx "cross" iA
\\times 
endsnippet

priority 100
snippet ** "cdot" iA
\\cdot 
endsnippet

context "math()"
snippet norm "norm" iA
\\|$1\\|$0
endsnippet

priority 300
context "math()"
snippet dint "integral" wA
\\int\\limits_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} $0
endsnippet

context "math()"
snippet mint "measure integral" wA
\\int\\limits_{${1:S}} ${2:${VISUAL}} d${3:\mu} $0
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|zeta|int)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 100
context "math()"
snippet -> "to" iA
\\to 
endsnippet

priority 200
context "math()"
snippet <-> "leftrightarrow" iA
\\leftrightarrow
endsnippet

context "math()"
snippet !> "mapsto" iA
\\mapsto 
endsnippet

context "math()"
snippet :: "colon" iA
\\colon 
endsnippet

context "math()"
snippet eps "epsilon" iA
\\varepsilon 
endsnippet

context "math()"
snippet invs "inverse" iA
^{-1}
endsnippet

context "math()"
snippet compl "complement" iA
^{c}
endsnippet

context "math()"
snippet \\\ "setminus" iA
\\setminus
endsnippet

snippet ~~ "~" iA
\\sim 
endsnippet

context "math()"
snippet set "set" wA
\\{$0\\}
endsnippet

context "math()"
snippet || "mid" iA
\\mid 
endsnippet

context "math()"
snippet abs "| |" iA
|$1| $0
endsnippet

context "math()"
snippet cc "subset" Ai
\\subset 
endsnippet

context "math()"
snippet pp "subset" Ai
\\supset 
endsnippet

context "math()"
snippet ni "not in" iA
\\not\\in 
endsnippet

context "math()"
snippet inn "in " iA
\\in 
endsnippet

context "math()"
snippet NN "n" iA
\\N
endsnippet

context "math()"
snippet nn "cap" iA
\\cap 
endsnippet

context "math()"
snippet UU "cup" iA
\\cup 
endsnippet

context "math()"
snippet uuu "bigcup" iA
\\bigcup_{${1:i \\in ${2: I}}} $0
endsnippet

context "math()"
snippet Nn "bigcap" iA
\\bigcap_{${1:i \\in ${2: I}}} $0
endsnippet

context "math()"
snippet OO "emptyset" iA
\\varnothing
endsnippet

context "math()"
snippet RR "real" iA
\\R
endsnippet

context "math()"
snippet QQ "Q" iA
\\Q
endsnippet

context "math()"
snippet ZZ "Z" iA
\\Z
endsnippet

snippet <! "normal" iA
\\triangleleft 
endsnippet

snippet <> "hokje"
\\diamond 
endsnippet

context "math()"
snippet '(?<!i)sts' "text subscript" irA
_\\text{$0}
endsnippet

context "math()"
snippet tt "text" iA
\\text{$0}
endsnippet

context "math()"
snippet case "cases" wA
\\begin{cases}
	$0
\\end{cases}
endsnippet

snippet bigfun "Big function" iA
\\begin{align*}
	$1: $2 &\\longrightarrow $3 \\\\
	$4 &\\longmapsto $1($4) = $0
\\end{align*}
endsnippet

snippet cvec "column vector" iA
\\begin{pmatrix} ${1:x}_${2:1}\\\\ \\vdots\\\\ $1_${2:n} \\end{pmatrix}
endsnippet

context "math()"
snippet dd "\dot" iA
\\dot{$0}
endsnippet

priority 10
context "math()"
snippet "bar" "bar" riA
\\overline{$0}
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" riA
\\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "hat" "hat" riA
\\hat{$1} $0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\\hat{`!p snip.rv=match.group(1)`} 
endsnippet

priority 10
context "math()"
snippet "wt" "WideTilde" riA
\\widetilde{$1} $0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])wt" "WideTilde" riA
\\widetilde{`!p snip.rv=match.group(1)`} 
endsnippet

snippet letu "let omega" iA
Let $U \\subset X$ be open.
endsnippet


snippet HH "H" iA
\\mathbb{H}
endsnippet

snippet DD "D" iA
\\mathbb{D}
endsnippet

context "math()"
snippet phi "Phi" iA
\\varphi
endsnippet

# vim:ft=snippets
